<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace=命名空间：绑定一个对应的DAO/Mapper接口-->
<mapper namespace="com.hnl.dao.UserMapper">
    <!--查询语句：id属性：方法名字
    这就相当于：之前的jdbc操作实现Dao接口，在DaoImp类中实现的方法
    resultType；返回值类型
    parameterType:参数类型
    -->
    <select id="getUserList" resultType="com.hnl.pojo.User">
        select * from mybatis.user
    </select>
    <!--#{id} 接收一个变量-->
    <select id="getUserById" resultType="com.hnl.pojo.User" parameterType="int">
        select * from mybatis.user where id =#{id}
    </select>
    <!--对象中的属性，可以直接取出，value中的属性要与数据库中的字段一一对应-->
    <insert id="addUser" parameterType="com.hnl.pojo.User">
        insert into mybatis.user (id,name,pwd) value (#{id},#{name},#{pwd});
    </insert>
    <!--使用Map:这样的话 value中的数据就不需要与数据库中的字段一一对应 但是map中的键要与value中的字段对应
    value中传递的map中的key，而这里的key又与sql语句前面的 mybatis.user (id,name,pwd) 一一对应
    -->
    <insert id="addUser2" parameterType="map">
        insert into mybatis.user (id,name,pwd) value (#{userId},#{userName},#{password});
    </insert>
    <update id="updateUser" parameterType="com.hnl.pojo.User">
       update mybatis.user set name=#{name} ,pwd=#{pwd}  where id=#{id};
    </update>
    <delete id="deleteUser" parameterType="int">
        delete from mybatis.user where id=#{id};
    </delete>

    <!--在这里拼接通配符，防止SQL注入-->
    <select id="getUserLike"  resultType="com.hnl.pojo.User">
        select * from mybatis.user where name like "%"#{value}"%";
    </select>
   <!-- <select id="getUserLike"  resultType="com.hnl.pojo.User">
        select * from mybatis.user where name like #{value};
    </select>-->
</mapper>